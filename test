#!/usr/bin/env bats

com=./opy

@test "pattern" {
  result=$(seq 10 | $com 'F1%2==0' | xargs )
  [ "$result" == '2 4 6 8 10' ]
}

@test "list mode" {
  result=$(echo 1 2 3 a b c | $com '[ F2, F3*3, F5+"aaa"]')
  [ "$result" = "2 9 baaa" ]
}

@test "pattern and list mode" {
  result=$(seq 4 | $com 'F1%2==0:[F1, ":even"]' | xargs)
  [ "$result" = "2 :even 4 :even" ]
}

@test "module import" {
  result=$( echo 3.141592 | $com -m math '[round(math.sin(F1/4),3)]' )
  [ "$result" = "0.707" ]
}

@test "module multiple import" {
  result=$( $com -m math,numpy 'B:[math.pi,numpy.pi]' )
  [ "$result" = "3.141592653589793 3.141592653589793" ]
}

@test "action" {
  result=$( seq 10 | $com '{print(F1,end="")}' )
  [ "$result" = "12345678910" ]
}

@test "action2" {
  result=$( seq 3 | $com '{r=1;print(r)}' | xargs )
  [ "$result" = "1 1 1" ]
}

@test "pattern and action" {
  result=$( seq 10 | $com 'F1%2==0:{F1= str(F1)+" " ; print(F1,end="")}' )
  [ "$result" = "2 4 6 8 10 " ]
}

@test "spaces after the colon" {
  result=$( seq 10 | $com 'F1%2==0:    {F1= str(F1)+" " ; print(F1,end="")}' )
  [ "$result" = "2 4 6 8 10 " ]
}

@test "multiple pattern" {
  result=$( seq 10 | $com 'F1%2==0;F1%2==1' | xargs )
  [ "$result" = "1 2 3 4 5 6 7 8 9 10" ]
}

@test "multiple lists" {
  result=$( seq 2 | $com '[F1];[F1]' | xargs )
  [ "$result" = "1 1 2 2" ]
}

@test "multiple actions" {
  result=$( seq 2 | $com '{print(F1)};{print(F1)}' | xargs )
  [ "$result" = "1 1 2 2" ]
}

@test "multiple pattern/lists" {
  result=$( seq 2 | $com 'F1%2==0:[F1, ":even"];F1%2==1:[F1, ":odd"]' | xargs)
  [ "$result" = "1 :odd 2 :even" ]
}

@test "multiple pattern/actions" {
  result=$( seq 2 | $com 'F1%2==0:{ print(F1, ":even") } ;F1%2==1:{ print(F1, ":odd")}' |xargs)
  [ "$result" = "1 :odd 2 :even" ]
}

@test "multiple actions/list actions" {
  result=$(echo a | $com 'B:[2]; B:{ print(1) }; {print(3)}; [4]' | xargs)
  [ "$result" = "2 1 3 4" ]
}

@test "begin pattern" {
  result=$( seq 2 | $com 'B:{a="hoge"};F1%2==1:{ print(F1, a)}' |xargs)
  [ "$result" = "1 hoge" ]
}

@test "end pattern" {
  result=$( seq 2 | $com 'B:{a=0};{a+=F1};END:{print(a)}' )
  [ "$result" = "3" ]
}

@test "close stdin" {
  result=$( $com 'B:{print(1+1)}' )
  [ "$result" = "2" ]
}

@test "list at begin" {
  result=$( $com 'B:[1+1]' )
  [ "$result" = "2" ]
}

@test "list at end" {
  result=$( seq 2 | $com 'B:{a=0};{a+=F1};END:[a]' )
  [ "$result" = "3" ]
}


@test "space" {
  result=$( seq 2 | $com 'B:{a=0}; {a+=F1}; END:[a]' )
  [ "$result" = "3" ]
}

@test "NF" {
  result=$( seq 10 | xargs -n 3 | $com '[NF]' | xargs )
  [ "$result" = "3 3 3 1" ]
}

@test "NR" {
  result=$( yes | head -n 3 | $com '[NR]' | xargs )
  [ "$result" = "1 2 3" ]
}

@test "dynamic module load" {
  result=$(echo 10 | $com '[round(math.sin(F1),3)]' )
  [ "$result" = "-0.544" ]
}

@test "regex" {
  result=$( seq 10 | $com 'r_("[24680]$")' | xargs )
  [ "$result" = "2 4 6 8 10" ]
}

@test "field regex" {
  result=$( seq 10 | xargs -n 2 | $com 'r_("[48]$",F2)' | xargs )
  [ "$result" = "3 4 7 8" ]
}

@test "file and FNR" {
  result=$( $com 'FNR==1' ./opy ./test | xargs)
  [ "$result" = "#!/usr/bin/env python3 #!/usr/bin/env bats" ]
}

@test "FILENAME" {
  result=$( seq 10 | $com 'FNR==1:[FILENAME]' ./opy "-" | xargs)
  [ "$result" = "./opy -" ]
}

@test "string mode" {
  result=$( seq 10 | $com -s 'F1=="3"' )
  [ "$result" = "3" ]
}

@test "begin and end without input" {
  result=$( $com 'B:{a,b=1,2};E:[a,b]' )
  [ "$result" = "1 2" ]
}


@test "use of dictionary" {
  result=$( echo a | $com 'B:{a={}};{a[F1]=F1};E:[a["a"]]' )
  [ "$result" = "a" ]
}


@test "scope of F1" {
  result=$( $com -m math,numpy 'B:[math.pi,numpy.pi]' )
  [ "$result" = "3.141592653589793 3.141592653589793" ]
}

@test "Fn scope in a list" {
  result=$( echo 1 | $com '{ print(" ".join([ str(x)*F1 for x in range(3) ])) }' )
  [ "$result" = "0 1 2" ]
}

@test "scope problem in a closure" {
  result=$(echo 3 | $com '{a=F1;print(" ".join([ str(x)*a for x in range(3) ]))}' )
  [ "$result" = "000 111 222" ]
}

@test "general purpose dictionary" {
  result=$( seq 3 | $com '{D[NR]="a"*F1};E:[dict(D)]' )
  [ "$result" = "{1: 'a', 2: 'aa', 3: 'aaa'}" ] 
}

@test "general purpose list" {
  result=$( seq 3 | $com '{L.append("a"*F1)};E:[L]' )
  [ "$result" = "['a', 'aa', 'aaa']" ] 
}

@test "general purpose key values" {
  result=$( echo -e 'a 2\nb b\na c\nb 10.0' | $com '{K[F1].append(F2)};E:{p_(K)}' | xargs )
  [ "$result" = "a [2, c] b [b, 10.0]" ] 
}

@test "print dictionary by p_" {
  result=$( seq 3 | $com '{D[NR]="a"*F1};E:{p_(D,"@")}' )
  [ "$result" = "1 a@2 aa@3 aaa@" ] 
}

@test "print list by p_" {
  result=$( seq 3 | $com  -o @ '{L.append(F1)};E:{p_(L)}' )
  [ "$result" = "1@2@3" ] 
}

@test "parse hex and others" {
  result=$( echo 0xa0 0b11 -0o11 | $com '[*F[1:]]' )
  [ "$result" = "160 3 -9" ] 
}

@test "outer values" {
  result=$( a=3.14; b="aho aho" ; $com -v "x=$a" -v "y=$b" 'B:[x*2, y*2]' )
  [ "$result" = "6.28 aho ahoaho aho" ] 
}

@test "outer values on string mode" {
  result=$( a=3.14; b="aho aho" ; $com -s -v "x=$a" -v "y=$b" 'B:[x*2, y*2]' )
  [ "$result" = "3.143.14 aho ahoaho aho" ] 
}

@test "null separator" {
  result=$( echo 123 | $com -i "" '[F2*2]' )
  [ "$result" = "4" ] 
}

@test "null separator on string mode" {
  result=$( echo 123 | $com -si "" '[F2*2]' )
  [ "$result" = "22" ] 
}

@test "csv mode" {
  result=$( echo -ne '1,2,3\n"あ","い"",","う"\n"やや,""こし"",や〜","やや,""こし"",や〜",","\n"もう,"",","いや,"",や"\n' | $com -c -o '|' 'NR' | tr '\n' @ )
  [ "$result" = '1|2|3@あ|い",|う@やや,"こし",や〜|やや,"こし",や〜|,@もう,",|いや,",や@' ] 
}

@test "csv mode string" {
  result=$( echo -ne '1,2,3' | $com -cs '[F1+F2+F3]')
  [ "$result" = '123' ]
}

@test "csv mode num" {
  result=$( echo -ne '1,2,3' | $com -c '[F1+F2+F3]')
  [ "$result" = '6' ]
}

@test "csv output mode" {
  result=$( echo -ne '1,2,3\n"あ","い"",","う"\n"やや,""こし"",や〜","やや,""こし"",や〜",","\n"もう,"",","いや,"",や"\n' | $com -c -o '|' 4)
  result2=$( echo -ne '1,2,3\n"あ","い"",","う"\n"やや,""こし"",や〜","やや,""こし"",や〜",","\n"もう,"",","いや,"",や"\n' | $com -cC 4 | $com -c -o '|' 4)

  [ "$result" = "$result2" ]
}

@test "json" {
  result=$( echo '{"hoge":["a","b"]}' | $com -j '[e for e in D["hoge"]]' | tr '\n' @)
  [ "$result" = "a@b@" ]
}

